# Generated by Eclipse GCJ Builder
# http://gcjbuilder.sf.net

#	global targets
ALL:	main 
all:	main 

#	gcj variable
GCJ=gcj  $(OPTLEVEL) $(DEBUGLEVEL) $(COMPILER_OPTIONS)

#	binary output folder
BINOUT= binout

#	compiler options
COMPILER_OPTIONS=

#	linker options
LINKER_OPTIONS=

#	object list
OBJ=Spider.o MailHash.o IndexFiles.o POITest.o Mail.o MailList.o TestMain.o documents/FileDocument.o documents/GaimLogDocument.o documents/MP3Document.o gui/MP3LogGUI.o gui/GaimLogGUI.o gui/Test.o gui/MainContentsGUI.o gui/UnknownfiletypeGUI.o gui/MailGUI.o metadata/idtree.o metadata/FormatDescription.o metadata/FormatIdentification.o metadata/FormatDescriptionReader.o 

#	jar objects
CPOBJ=

#	jar so
CPSO=

#	project classpath 
CP="--classpath=poi.jar:poi-contrib.jar:poi-scratchpad.jar:sabercat.jar:xercesImpl.jar:xml-apis.jar:xmlParserAPIs.jar:xalan.jar:jmimemagic-0.0.4a.jar:./libs/lucene-1.4.3.jar:./:"

#	main class (or so output)
MAINCLASS=

#	binary name (exe or so)
BIN=$(BINOUT)/JIndex

#	library path list
LIBRARYPATH=-L $(BINOUT) 

#	libraries (so) list
LIBRARIES=

#	resource objects list
RESOB=

#	compiler optimization level
OPTLEVEL= -O0

#	compiler debug level
DEBUGLEVEL= -g0


#	object targets
%.o:	%.java
	$(GCJ) $(CP)  -c $? -o $@
	
##################
#	dummy targets (depend on config)

#	classpath objects target


#	classpath so target


#	resource objects target



#################

	
#	main target

main: setup $(CPOBJ) $(RESOB) $(OBJ) $(CPSO)
	$(GCJ) $(LINKER_OPTIONS) $(MAINCLASS) $(CPOBJ) $(RESOB) $(OBJ) -o$(BIN)   $(LIBRARYPATH) $(LIBRARIES)

#	setup output folders
setup:
	mkdir -p $(BINOUT)/resource

#	clean target    
clean:
	rm -f `find . -name "*.o"`
	rm -r $(BINOUT)

